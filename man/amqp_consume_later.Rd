% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consume.R
\name{amqp_consume_later}
\alias{amqp_consume_later}
\title{Consume Messages from a Queue, Later}
\usage{
amqp_consume_later(conn, queue, fun, tag = "", no_ack = FALSE,
  exclusive = FALSE)
}
\arguments{
\item{conn}{An object returned by \code{\link{amqp_connect}}, but see
\strong{Details}.}

\item{queue}{The name of a queue.}

\item{fun}{A function taking a single parameter, the message received. This
function is executed by \code{\link[later]{later}} whenever messages are
received on the queue.}

\item{tag}{An optional "tag" to identify the consumer. When empty, the
server will generate one automatically.}

\item{no_ack}{When \code{TRUE}, tell the server not to expect that messages
will be acknowledged.}

\item{exclusive}{When \code{TRUE}, request that this consumer has exclusive
access to the queue.}
}
\description{
Consume messages "asynchronously" by using the machinery of the
\strong{\link[later]{later}} package. This function is primarily for use
inside applications (particularly Shiny applications) that already make use
of \strong{later} to manage events.
}
\details{
Because the \code{amqp_connection} object is not thread-safe, this
function actually clones the connection properties and opens a new one for
the consumer. This may lead to some surprising results, including the fact
that consumers created with this interface will not stop running if the
original connection is closed. Consumers can only be stopped by using
\code{\link{amqp_cancel_consumer}}.
}
\seealso{
\code{\link{amqp_consume}} to consume messages in the main thread.
}
