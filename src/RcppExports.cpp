// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "longears_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// amqp_connect_
Rcpp::XPtr<AmqpConnection> amqp_connect_(std::string host, int port, std::string vhost, std::string username, std::string password, long timeout);
RcppExport SEXP _longears_amqp_connect_(SEXP hostSEXP, SEXP portSEXP, SEXP vhostSEXP, SEXP usernameSEXP, SEXP passwordSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< std::string >::type vhost(vhostSEXP);
    Rcpp::traits::input_parameter< std::string >::type username(usernameSEXP);
    Rcpp::traits::input_parameter< std::string >::type password(passwordSEXP);
    Rcpp::traits::input_parameter< long >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(amqp_connect_(host, port, vhost, username, password, timeout));
    return rcpp_result_gen;
END_RCPP
}
// amqp_disconnect_
void amqp_disconnect_(Rcpp::XPtr<AmqpConnection> conn);
RcppExport SEXP _longears_amqp_disconnect_(SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    amqp_disconnect_(conn);
    return R_NilValue;
END_RCPP
}
// is_connected
bool is_connected(Rcpp::XPtr<AmqpConnection> conn);
RcppExport SEXP _longears_is_connected(SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    rcpp_result_gen = Rcpp::wrap(is_connected(conn));
    return rcpp_result_gen;
END_RCPP
}
// amqp_declare_exchange_
void amqp_declare_exchange_(Rcpp::XPtr<AmqpConnection> conn, std::string exchange, std::string type, bool passive, bool durable, bool auto_delete, bool internal);
RcppExport SEXP _longears_amqp_declare_exchange_(SEXP connSEXP, SEXP exchangeSEXP, SEXP typeSEXP, SEXP passiveSEXP, SEXP durableSEXP, SEXP auto_deleteSEXP, SEXP internalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type exchange(exchangeSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type passive(passiveSEXP);
    Rcpp::traits::input_parameter< bool >::type durable(durableSEXP);
    Rcpp::traits::input_parameter< bool >::type auto_delete(auto_deleteSEXP);
    Rcpp::traits::input_parameter< bool >::type internal(internalSEXP);
    amqp_declare_exchange_(conn, exchange, type, passive, durable, auto_delete, internal);
    return R_NilValue;
END_RCPP
}
// amqp_delete_exchange_
void amqp_delete_exchange_(Rcpp::XPtr<AmqpConnection> conn, std::string exchange, bool if_unused);
RcppExport SEXP _longears_amqp_delete_exchange_(SEXP connSEXP, SEXP exchangeSEXP, SEXP if_unusedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type exchange(exchangeSEXP);
    Rcpp::traits::input_parameter< bool >::type if_unused(if_unusedSEXP);
    amqp_delete_exchange_(conn, exchange, if_unused);
    return R_NilValue;
END_RCPP
}
// amqp_declare_queue_
Rcpp::List amqp_declare_queue_(Rcpp::XPtr<AmqpConnection> conn, std::string queue, bool passive, bool durable, bool exclusive, bool auto_delete);
RcppExport SEXP _longears_amqp_declare_queue_(SEXP connSEXP, SEXP queueSEXP, SEXP passiveSEXP, SEXP durableSEXP, SEXP exclusiveSEXP, SEXP auto_deleteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type queue(queueSEXP);
    Rcpp::traits::input_parameter< bool >::type passive(passiveSEXP);
    Rcpp::traits::input_parameter< bool >::type durable(durableSEXP);
    Rcpp::traits::input_parameter< bool >::type exclusive(exclusiveSEXP);
    Rcpp::traits::input_parameter< bool >::type auto_delete(auto_deleteSEXP);
    rcpp_result_gen = Rcpp::wrap(amqp_declare_queue_(conn, queue, passive, durable, exclusive, auto_delete));
    return rcpp_result_gen;
END_RCPP
}
// amqp_delete_queue_
int amqp_delete_queue_(Rcpp::XPtr<AmqpConnection> conn, std::string queue, bool if_unused, bool if_empty);
RcppExport SEXP _longears_amqp_delete_queue_(SEXP connSEXP, SEXP queueSEXP, SEXP if_unusedSEXP, SEXP if_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type queue(queueSEXP);
    Rcpp::traits::input_parameter< bool >::type if_unused(if_unusedSEXP);
    Rcpp::traits::input_parameter< bool >::type if_empty(if_emptySEXP);
    rcpp_result_gen = Rcpp::wrap(amqp_delete_queue_(conn, queue, if_unused, if_empty));
    return rcpp_result_gen;
END_RCPP
}
// amqp_publish_
void amqp_publish_(Rcpp::XPtr<AmqpConnection> conn, std::string routing_key, std::string body, std::string exchange, std::string content_type, bool mandatory, bool immediate);
RcppExport SEXP _longears_amqp_publish_(SEXP connSEXP, SEXP routing_keySEXP, SEXP bodySEXP, SEXP exchangeSEXP, SEXP content_typeSEXP, SEXP mandatorySEXP, SEXP immediateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type routing_key(routing_keySEXP);
    Rcpp::traits::input_parameter< std::string >::type body(bodySEXP);
    Rcpp::traits::input_parameter< std::string >::type exchange(exchangeSEXP);
    Rcpp::traits::input_parameter< std::string >::type content_type(content_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type mandatory(mandatorySEXP);
    Rcpp::traits::input_parameter< bool >::type immediate(immediateSEXP);
    amqp_publish_(conn, routing_key, body, exchange, content_type, mandatory, immediate);
    return R_NilValue;
END_RCPP
}
// amqp_get_
Rcpp::StringVector amqp_get_(Rcpp::XPtr<AmqpConnection> conn, std::string queue);
RcppExport SEXP _longears_amqp_get_(SEXP connSEXP, SEXP queueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<AmqpConnection> >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type queue(queueSEXP);
    rcpp_result_gen = Rcpp::wrap(amqp_get_(conn, queue));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_longears_amqp_connect_", (DL_FUNC) &_longears_amqp_connect_, 6},
    {"_longears_amqp_disconnect_", (DL_FUNC) &_longears_amqp_disconnect_, 1},
    {"_longears_is_connected", (DL_FUNC) &_longears_is_connected, 1},
    {"_longears_amqp_declare_exchange_", (DL_FUNC) &_longears_amqp_declare_exchange_, 7},
    {"_longears_amqp_delete_exchange_", (DL_FUNC) &_longears_amqp_delete_exchange_, 3},
    {"_longears_amqp_declare_queue_", (DL_FUNC) &_longears_amqp_declare_queue_, 6},
    {"_longears_amqp_delete_queue_", (DL_FUNC) &_longears_amqp_delete_queue_, 4},
    {"_longears_amqp_publish_", (DL_FUNC) &_longears_amqp_publish_, 7},
    {"_longears_amqp_get_", (DL_FUNC) &_longears_amqp_get_, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_longears(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
